-- Schema for Profile
-- Generated by CIMTool http://cimtool.org

-- A wire or combination of wires, with consistent electrical characteristics,
-- building a single electrical system, used to carry alternating current
-- between points in the power system.
-- For symmetrical, transposed 3ph lines, it is sufficient to use attributes
-- of the line segment, which describe impedances and admittances for the
-- entire length of the segment. Additionally impedances can be computed by
-- using length and associated per length impedances.
-- The BaseVoltage at the two ends of ACLineSegments in a Line shall have
-- the same BaseVoltage.nominalVoltage. However, boundary lines may have slightly
-- different BaseVoltage.nominalVoltages and variation is allowed. Larger
-- voltage difference in general requires use of an equivalent branch.

CREATE TABLE `ModelComponents`  ( 
	`mRID`         	varchar(50) NULL,
	`componentMRID`	varchar(50) NULL,
	`tableName`    	varchar(50) NULL 
	);
CREATE TABLE `ACLineSegment`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- Zero sequence shunt (charging) susceptance, uniformly distributed, of the
    -- entire line section.
    `b0ch` DOUBLE PRECISION,
    -- Positive sequence shunt (charging) susceptance, uniformly distributed,
    -- of the entire line section. This value represents the full charging over
    -- the full length of the line.
    `bch` DOUBLE PRECISION,
    -- Zero sequence shunt (charging) conductance, uniformly distributed, of the
    -- entire line section.
    `g0ch` DOUBLE PRECISION,
    -- Positive sequence shunt (charging) conductance, uniformly distributed,
    -- of the entire line section.
    `gch` DOUBLE PRECISION,
    -- Segment length for calculating line section capabilities
    `length` DOUBLE PRECISION NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Positive sequence series resistance of the entire line section.
    `r` DOUBLE PRECISION,
    -- Zero sequence series resistance of the entire line section.
    `r0` DOUBLE PRECISION,
    -- Positive sequence series reactance of the entire line section.
    `x` DOUBLE PRECISION,
    -- Zero sequence series reactance of the entire line section.
    `x0` DOUBLE PRECISION,
    -- Base voltage of this conducting equipment. Use only when there is no voltage
    -- level container used and only one base voltage applies. For example, not
    -- used for transformers.
    `BaseVoltage` varchar(50) NOT NULL,
    -- Container of this equipment.
    `EquipmentContainer` varchar(50) NOT NULL,
    -- Location of this power system resource.
    `Location` varchar(50) NOT NULL,
    -- Per-length impedance of this line segment.
    `PerLengthImpedance` varchar(50)
);

-- Represents a single wire of an alternating current line segment.
CREATE TABLE `ACLineSegmentPhase`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- The phase connection of the wire at both ends.
    `phase` varchar(50) NOT NULL,
    -- The line segment to which the phase belongs.
    `ACLineSegment` varchar(50) NOT NULL,
    -- Location of this power system resource.
    `Location` varchar(50) NOT NULL
);

-- Tangible resource of the utility, including power system equipment, various
-- end devices, cabinets, buildings, etc. For electrical network equipment,
-- the role of the asset is defined through PowerSystemResource and its subclasses,
-- defined mainly in the Wires model (refer to IEC61970-301 and model package
-- IEC61970::Wires). Asset description places emphasis on the physical characteristics
-- of the equipment fulfilling that role.
CREATE TABLE `Asset`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Data applicable to this asset.
    `AssetInfo` varchar(50)
);

-- Defines a system base voltage which is referenced.
CREATE TABLE `BaseVoltage`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- The power system resource's base voltage.
    `nominalVoltage` DOUBLE PRECISION NOT NULL
);

-- A mechanical switching device capable of making, carrying, and breaking
-- currents under normal circuit conditions and also making, carrying for
-- a specified time, and breaking currents under specified abnormal circuit
-- conditions e.g. those of short circuit.
CREATE TABLE `Breaker`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The maximum fault current a breaking device can break safely under prescribed
    -- conditions of use.
    `breakingCapacity` DOUBLE PRECISION NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- The attribute is used in cases when no Measurement for the status value
    -- is present. If the Switch has a status measurement the Discrete.normalValue
    -- is expected to match with the Switch.normalOpen.
    `normalOpen` CHAR(1) NOT NULL,
    -- The attribute tells if the switch is considered open when used as input
    -- to topology processing.
    `open` CHAR(1) NOT NULL,
    -- The maximum continuous current carrying capacity in amps governed by the
    -- device material and construction.
    `ratedCurrent` DOUBLE PRECISION NOT NULL,
    -- Branch is retained in a bus branch model. The flow through retained switches
    -- will normally be calculated in power flow.
    `retained` CHAR(1) NOT NULL,
    -- Base voltage of this conducting equipment. Use only when there is no voltage
    -- level container used and only one base voltage applies. For example, not
    -- used for transformers.
    `BaseVoltage` varchar(50) NOT NULL,
    -- Container of this equipment.
    `EquipmentContainer` varchar(50) NOT NULL,
    -- Location of this power system resource.
    `Location` varchar(50) NOT NULL
);

-- Concentric neutral cable data.
CREATE TABLE `ConcentricNeutralCableInfo`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- (if there is a different core material) Radius of the central core.
    `coreRadius` DOUBLE PRECISION NOT NULL,
    -- (if used) Number of strands in the steel core.
    `coreStrandCount` INTEGER NOT NULL,
    -- Diameter over the core, including any semi-con screen; should be the insulating
    -- layer's inside diameter.
    `diameterOverCore` DOUBLE PRECISION NOT NULL,
    -- Diameter over the insulating layer, excluding outer screen.
    `diameterOverInsulation` DOUBLE PRECISION NOT NULL,
    -- Diameter over the outermost jacketing layer.
    `diameterOverJacket` DOUBLE PRECISION NOT NULL,
    -- Diameter over the concentric neutral strands.
    `diameterOverNeutral` DOUBLE PRECISION NOT NULL,
    -- Diameter over the outer screen; should be the shield's inside diameter.
    `diameterOverScreen` DOUBLE PRECISION NOT NULL,
    -- Geometric mean radius. If we replace the conductor by a thin walled tube
    -- of radius GMR, then its reactance is identical to the reactance of the
    -- actual conductor.
    `gmr` DOUBLE PRECISION NOT NULL,
    -- True if conductor is insulated.
    `insulated` CHAR(1) NOT NULL,
    -- (if insulated conductor) Material used for insulation.
    `insulationMaterial` varchar(50) NOT NULL,
    -- (if insulated conductor) Thickness of the insulation.
    `insulationThickness` DOUBLE PRECISION NOT NULL,
    -- True if wire strands are extruded in a way to fill the voids in the cable.
    `isStrandFill` CHAR(1) NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Number of concentric neutral strands.
    `neutralStrandCount` INTEGER NOT NULL,
    -- Geometric mean radius of the neutral strand.
    `neutralStrandGmr` DOUBLE PRECISION NOT NULL,
    -- Outside radius of the neutral strand.
    `neutralStrandRadius` DOUBLE PRECISION NOT NULL,
    -- DC resistance per unit length of the neutral strand at 20 °C.
    `neutralStrandRDC20` DOUBLE PRECISION NOT NULL,
    -- Maximum nominal design operating temperature.
    `nominalTemperature` DOUBLE PRECISION NOT NULL,
    -- AC resistance per unit length of the conductor at 25 °C.
    `rAC25` DOUBLE PRECISION NOT NULL,
    -- AC resistance per unit length of the conductor at 50 °C.
    `rAC50` DOUBLE PRECISION NOT NULL,
    -- AC resistance per unit length of the conductor at 75 °C.
    `rAC75` DOUBLE PRECISION NOT NULL,
    -- Outside radius of the wire.
    `radius` DOUBLE PRECISION NOT NULL,
    -- Current carrying capacity of the wire under stated thermal conditions.
    `ratedCurrent` DOUBLE PRECISION NOT NULL,
    -- DC resistance per unit length of the conductor at 20 °C.
    `rDC20` DOUBLE PRECISION NOT NULL,
    -- True if sheath / shield is used as a neutral (i.e., bonded).
    `sheathAsNeutral` CHAR(1) NOT NULL,
    -- Describes the wire gauge or cross section (e.g., 4/0, #2, 336.5).
    `sizeDescription`  varchar(50) NOT NULL,
    -- Number of strands in the conductor.
    `strandCount` INTEGER NOT NULL
);

-- Connectivity nodes are points where terminals of AC conducting equipment
-- are connected together with zero impedance.
CREATE TABLE `ConnectivityNode`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Container of this connectivity node.
    `ConnectivityNodeContainer` varchar(50) NOT NULL,
    -- The topological node to which this connectivity node is assigned. May depend
    -- on the current state of switches in the network.
    `TopologicalNode` varchar(50) NOT NULL
);

-- Coordinate reference system.
CREATE TABLE `CoordinateSystem`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- A Uniform Resource Name (URN) for the coordinate reference system (crs)
    -- used to define 'Location.PositionPoints'.
    -- An example would be the European Petroleum Survey Group (EPSG) code for
    -- a coordinate reference system, defined in URN under the Open Geospatial
    -- Consortium (OGC) namespace as: urn:ogc:def:uom:EPSG::XXXX, where XXXX is
    -- an EPSG code (a full list of codes can be found at the EPSG Registry web
    -- site http://www.epsg-registry.org/). To define the coordinate system as
    -- being WGS84 (latitude, longitude) using an EPSG OGC, this attribute would
    -- be urn:ogc:def:uom:EPSG::4236.
    -- A profile should limit this code to a set of allowed URNs agreed to by
    -- all sending and receiving parties.
    `crsUrn`  varchar(50) NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL
);

-- A manually operated or motor operated mechanical switching device used
-- for changing the connections in a circuit, or for isolating a circuit or
-- equipment from a source of power. It is required to open or close circuits
-- when negligible current is broken or made.
CREATE TABLE `Disconnector`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- The attribute is used in cases when no Measurement for the status value
    -- is present. If the Switch has a status measurement the Discrete.normalValue
    -- is expected to match with the Switch.normalOpen.
    `normalOpen` CHAR(1) NOT NULL,
    -- The attribute tells if the switch is considered open when used as input
    -- to topology processing.
    `open` CHAR(1) NOT NULL,
    -- The maximum continuous current carrying capacity in amps governed by the
    -- device material and construction.
    `ratedCurrent` DOUBLE PRECISION NOT NULL,
    -- Branch is retained in a bus branch model. The flow through retained switches
    -- will normally be calculated in power flow.
    `retained` CHAR(1) NOT NULL,
    -- Base voltage of this conducting equipment. Use only when there is no voltage
    -- level container used and only one base voltage applies. For example, not
    -- used for transformers.
    `BaseVoltage` varchar(50) NOT NULL,
    -- Container of this equipment.
    `EquipmentContainer` varchar(50) NOT NULL,
    -- Location of this power system resource.
    `Location` varchar(50) NOT NULL
);

-- Generic user of energy - a point of consumption on the power system model.
CREATE TABLE `EnergyConsumer`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- Number of individual customers represented by this demand.
    `customerCount` INTEGER NOT NULL,
    -- Used for Yn and Zn connections. True if the neutral is solidly grounded.
    `grounded` CHAR(1) NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Active power of the load that is a fixed quantity. Load sign convention
    -- is used, i.e. positive sign means flow out from a node.
    `pfixed` DOUBLE PRECISION NOT NULL,
    -- The type of phase connection, such as wye or delta.
    `phaseConnection` varchar(50) NOT NULL,
    -- Reactive power of the load that is a fixed quantity. Load sign convention
    -- is used, i.e. positive sign means flow out from a node.
    `qfixed` DOUBLE PRECISION NOT NULL,
    -- Base voltage of this conducting equipment. Use only when there is no voltage
    -- level container used and only one base voltage applies. For example, not
    -- used for transformers.
    `BaseVoltage` varchar(50) NOT NULL,
    -- Container of this equipment.
    `EquipmentContainer` varchar(50) NOT NULL,
    -- The load response characteristic of this load. If missing, this load is
    -- assumed to be constant power.
    `LoadResponse` varchar(50) NOT NULL,
    -- Location of this power system resource.
    `Location` varchar(50) NOT NULL
);

-- A single phase of an energy consumer.
CREATE TABLE `EnergyConsumerPhase`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Active power of the load that is a fixed quantity. Load sign convention
    -- is used, i.e. positive sign means flow out from a node.
    `pfixed` DOUBLE PRECISION NOT NULL,
    -- Phase of this energy consumer component. If the energy consumer is wye
    -- connected, the connection is from the indicated phase to the central ground
    -- or neutral point. If the energy consumer is delta connected, the phase
    -- indicates an energy consumer connected from the indicated phase to the
    -- next logical non-neutral phase.
    `phase` varchar(50) NOT NULL,
    -- Reactive power of the load that is a fixed quantity. Load sign convention
    -- is used, i.e. positive sign means flow out from a node.
    `qfixed` DOUBLE PRECISION NOT NULL,
    -- The energy consumer to which this phase belongs.
    `EnergyConsumer` varchar(50) NOT NULL,
    -- Location of this power system resource.
    `Location` varchar(50) NOT NULL
);

-- A generic equivalent for an energy supplier on a transmission or distribution
-- voltage level.
CREATE TABLE `EnergySource`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Phase-to-phase nominal voltage.
    `nominalVoltage` DOUBLE PRECISION NOT NULL,
    -- Positive sequence Thevenin resistance.
    `r` DOUBLE PRECISION NOT NULL,
    -- Zero sequence Thevenin resistance.
    `r0` DOUBLE PRECISION NOT NULL,
    -- Phase angle of a-phase open circuit.
    `voltageAngle` DOUBLE PRECISION NOT NULL,
    -- Phase-to-phase open circuit voltage magnitude.
    `voltageMagnitude` DOUBLE PRECISION NOT NULL,
    -- Positive sequence Thevenin reactance.
    `x` DOUBLE PRECISION NOT NULL,
    -- Zero sequence Thevenin reactance.
    `x0` DOUBLE PRECISION NOT NULL,
    -- Base voltage of this conducting equipment. Use only when there is no voltage
    -- level container used and only one base voltage applies. For example, not
    -- used for transformers.
    `BaseVoltage` varchar(50) NOT NULL,
    -- Container of this equipment.
    `EquipmentContainer` varchar(50) NOT NULL,
    -- Location of this power system resource.
    `Location` varchar(50) NOT NULL
);

-- An overcurrent protective device with a circuit opening fusible part that
-- is heated and severed by the passage of overcurrent through it. A fuse
-- is considered a switching device because it breaks current.
CREATE TABLE `Fuse`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- The attribute is used in cases when no Measurement for the status value
    -- is present. If the Switch has a status measurement the Discrete.normalValue
    -- is expected to match with the Switch.normalOpen.
    `normalOpen` CHAR(1) NOT NULL,
    -- The attribute tells if the switch is considered open when used as input
    -- to topology processing.
    `open` CHAR(1) NOT NULL,
    -- The maximum continuous current carrying capacity in amps governed by the
    -- device material and construction.
    `ratedCurrent` DOUBLE PRECISION NOT NULL,
    -- Branch is retained in a bus branch model. The flow through retained switches
    -- will normally be calculated in power flow.
    `retained` CHAR(1) NOT NULL,
    -- Base voltage of this conducting equipment. Use only when there is no voltage
    -- level container used and only one base voltage applies. For example, not
    -- used for transformers.
    `BaseVoltage` varchar(50) NOT NULL,
    -- Container of this equipment.
    `EquipmentContainer` varchar(50) NOT NULL,
    -- Location of this power system resource.
    `Location` varchar(50) NOT NULL
);

-- A geographical region of a power system network model.
CREATE TABLE `GeographicalRegion`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL
);

-- IEC 61968 version number assigned to this UML model.
CREATE TABLE `IEC61968CIMVersion`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- Form is YYYY-MM-DD for example for January 5, 2009 it is 2009-01-05.
    `date`  varchar(50) NOT NULL,
    -- Form is IEC61968CIMXXvYY where XX is the major CIM package version and
    -- the YY is the minor version. For example IEC61968CIM10v17.
    `version`  varchar(50) NOT NULL
);

-- This is the IEC 61970 CIM version number assigned to this UML model.
CREATE TABLE `IEC61970CIMVersion`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- Form is YYYY-MM-DD for example for January 5, 2009 it is 2009-01-05.
    `date`  varchar(50) NOT NULL,
    -- Form is IEC61970CIMXXvYY where XX is the major CIM package version and
    -- the YY is the minor version. For example IEC61970CIM13v18.
    `version`  varchar(50) NOT NULL
);

-- A short section of conductor with negligible impedance which can be manually
-- removed and replaced if the circuit is de-energized. Note that zero-impedance
-- branches can potentially be modeled by other equipment types.
CREATE TABLE `Jumper`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- The attribute is used in cases when no Measurement for the status value
    -- is present. If the Switch has a status measurement the Discrete.normalValue
    -- is expected to match with the Switch.normalOpen.
    `normalOpen` CHAR(1) NOT NULL,
    -- The attribute tells if the switch is considered open when used as input
    -- to topology processing.
    `open` CHAR(1) NOT NULL,
    -- The maximum continuous current carrying capacity in amps governed by the
    -- device material and construction.
    `ratedCurrent` DOUBLE PRECISION NOT NULL,
    -- Branch is retained in a bus branch model. The flow through retained switches
    -- will normally be calculated in power flow.
    `retained` CHAR(1) NOT NULL,
    -- Base voltage of this conducting equipment. Use only when there is no voltage
    -- level container used and only one base voltage applies. For example, not
    -- used for transformers.
    `BaseVoltage` varchar(50) NOT NULL,
    -- Container of this equipment.
    `EquipmentContainer` varchar(50) NOT NULL,
    -- Location of this power system resource.
    `Location` varchar(50) NOT NULL
);

-- Contains equipment beyond a substation belonging to a power transmission
-- line.
CREATE TABLE `Line`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Location of this power system resource.
    `Location` varchar(50) NOT NULL,
    -- The sub-geographical region of the line.
    `Region` varchar(50) NOT NULL
);

-- A linear shunt compensator has banks or sections with equal admittance
-- values.
CREATE TABLE `LinearShuntCompensator`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- Time delay required for the device to be connected or disconnected by automatic
    -- voltage regulation (AVR).
    `aVRDelay` DOUBLE PRECISION NOT NULL,
    -- Zero sequence shunt (charging) susceptance per section
    `b0PerSection` DOUBLE PRECISION NOT NULL,
    -- Positive sequence shunt (charging) susceptance per section
    `bPerSection` DOUBLE PRECISION NOT NULL,
    -- Zero sequence shunt (charging) conductance per section
    `g0PerSection` DOUBLE PRECISION NOT NULL,
    -- Positive sequence shunt (charging) conductance per section
    `gPerSection` DOUBLE PRECISION NOT NULL,
    -- Used for Yn and Zn connections. True if the neutral is solidly grounded.
    `grounded` CHAR(1) NOT NULL,
    -- The maximum number of sections that may be switched in.
    `maximumSections` INTEGER NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- The voltage at which the nominal reactive power may be calculated. This
    -- should normally be within 10% of the voltage at which the capacitor is
    -- connected to the network.
    `nomU` DOUBLE PRECISION NOT NULL,
    -- The normal number of sections switched in.
    `normalSections` INTEGER NOT NULL,
    -- The type of phase connection, such as wye or delta.
    `phaseConnection` varchar(50) NOT NULL,
    -- Base voltage of this conducting equipment. Use only when there is no voltage
    -- level container used and only one base voltage applies. For example, not
    -- used for transformers.
    `BaseVoltage` varchar(50) NOT NULL,
    -- Container of this equipment.
    `EquipmentContainer` varchar(50) NOT NULL,
    -- Location of this power system resource.
    `Location` varchar(50) NOT NULL
);

-- A per phase linear shunt compensator has banks or sections with equal admittance
-- values.
CREATE TABLE `LinearShuntCompensatorPhase`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- Susceptance per section of the phase if shunt compensator is wye connected.
    -- Susceptance per section phase to phase if shunt compensator is delta connected.
    `bPerSection` DOUBLE PRECISION NOT NULL,
    -- Conductance per section for this phase if shunt compensator is wye connected.
    -- Conductance per section phase to phase if shunt compensator is delta connected.
    `gPerSection` DOUBLE PRECISION NOT NULL,
    -- The maximum number of sections that may be switched in for this phase.
    `maximumSections` INTEGER NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- For the capacitor phase, the normal number of sections switched in.
    `normalSections` INTEGER NOT NULL,
    -- Phase of this shunt compensator component. If the shunt compensator is
    -- wye connected, the connection is from the indicated phase to the central
    -- ground or neutral point. If the shunt compensator is delta connected, the
    -- phase indicates a shunt compensator connected from the indicated phase
    -- to the next logical non-neutral phase.
    `phase` varchar(50) NOT NULL,
    -- Location of this power system resource.
    `Location` varchar(50) NOT NULL,
    -- Shunt compensator of this shunt compensator phase.
    `ShuntCompensator` varchar(50) NOT NULL
);

-- A mechanical switching device capable of making, carrying, and breaking
-- currents under normal operating conditions.
CREATE TABLE `LoadBreakSwitch`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The maximum fault current a breaking device can break safely under prescribed
    -- conditions of use.
    `breakingCapacity` DOUBLE PRECISION NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- The attribute is used in cases when no Measurement for the status value
    -- is present. If the Switch has a status measurement the Discrete.normalValue
    -- is expected to match with the Switch.normalOpen.
    `normalOpen` CHAR(1) NOT NULL,
    -- The attribute tells if the switch is considered open when used as input
    -- to topology processing.
    `open` CHAR(1) NOT NULL,
    -- The maximum continuous current carrying capacity in amps governed by the
    -- device material and construction.
    `ratedCurrent` DOUBLE PRECISION NOT NULL,
    -- Branch is retained in a bus branch model. The flow through retained switches
    -- will normally be calculated in power flow.
    `retained` CHAR(1) NOT NULL,
    -- Base voltage of this conducting equipment. Use only when there is no voltage
    -- level container used and only one base voltage applies. For example, not
    -- used for transformers.
    `BaseVoltage` varchar(50) NOT NULL,
    -- Container of this equipment.
    `EquipmentContainer` varchar(50) NOT NULL,
    -- Location of this power system resource.
    `Location` varchar(50) NOT NULL
);

-- Models the characteristic response of the load demand due to changes in
-- system conditions such as voltage and frequency. This is not related to
-- demand response.
-- If LoadResponseCharacteristic.exponentModel is True, the voltage exponents
-- are specified and used as to calculate:
-- Active power component = Pnominal * (Voltage/cim:BaseVoltage.nominalVoltage)
-- ** cim:LoadResponseCharacteristic.pVoltageExponent
-- Reactive power component = Qnominal * (Voltage/cim:BaseVoltage.nominalVoltage)**
-- cim:LoadResponseCharacteristic.qVoltageExponent
-- Where * means `multiply` and ** is `raised to power of`.
CREATE TABLE `LoadResponseCharacteristic`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- Indicates the exponential voltage dependency model is to be used. If false,
    -- the coefficient model is to be used.
    -- The exponential voltage dependency model consist of the attributes
    -- - pVoltageExponent
    -- - qVoltageExponent.
    -- The coefficient model consist of the attributes
    -- - pConstantImpedance
    -- - pConstantCurrent
    -- - pConstantPower
    -- - qConstantImpedance
    -- - qConstantCurrent
    -- - qConstantPower.
    -- The sum of pConstantImpedance, pConstantCurrent and pConstantPower shall
    -- equal 1.
    -- The sum of qConstantImpedance, qConstantCurrent and qConstantPower shall
    -- equal 1.
    `exponentModel` CHAR(1) NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Portion of active power load modeled as constant current.
    `pConstantCurrent` DOUBLE PRECISION NOT NULL,
    -- Portion of active power load modeled as constant impedance.
    `pConstantImpedance` DOUBLE PRECISION NOT NULL,
    -- Portion of active power load modeled as constant power.
    `pConstantPower` DOUBLE PRECISION NOT NULL,
    -- Exponent of per unit frequency effecting active power.
    `pFrequencyExponent` DOUBLE PRECISION NOT NULL,
    -- Exponent of per unit voltage effecting real power.
    `pVoltageExponent` DOUBLE PRECISION NOT NULL,
    -- Portion of reactive power load modeled as constant current.
    `qConstantCurrent` DOUBLE PRECISION NOT NULL,
    -- Portion of reactive power load modeled as constant impedance.
    `qConstantImpedance` DOUBLE PRECISION NOT NULL,
    -- Portion of reactive power load modeled as constant power.
    `qConstantPower` DOUBLE PRECISION NOT NULL,
    -- Exponent of per unit frequency effecting reactive power.
    `qFrequencyExponent` DOUBLE PRECISION NOT NULL,
    -- Exponent of per unit voltage effecting reactive power.
    `qVoltageExponent` DOUBLE PRECISION NOT NULL
);

-- The place, scene, or point of something where someone or something has
-- been, is, and/or will be at a given moment in time. It can be defined with
-- one or more postition points (coordinates) in a given coordinate system.
CREATE TABLE `Location`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Coordinate system used to describe position points of this location.
    `CoordinateSystem` varchar(50) NOT NULL
);

-- No-load test results determine core admittance parameters. They include
-- exciting current and core loss measurements from applying voltage to one
-- winding. The excitation may be positive sequence or zero sequence. The
-- test may be repeated at different voltages to measure saturation.
CREATE TABLE `NoLoadTest`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- Base power at which the tests are conducted, usually equal to the rateds
    -- of one of the involved transformer ends.
    `basePower` DOUBLE PRECISION NOT NULL,
    -- Voltage applied to the winding (end) during test.
    `energisedEndVoltage` DOUBLE PRECISION NOT NULL,
    -- Exciting current measured from a positive-sequence or single-phase excitation
    -- test.
    `excitingCurrent` DOUBLE PRECISION NOT NULL,
    -- Exciting current measured from a zero-sequence open-circuit excitation
    -- test.
    `excitingCurrentZero` DOUBLE PRECISION NOT NULL,
    -- Losses measured from a positive-sequence or single-phase excitation test.
    `loss` DOUBLE PRECISION NOT NULL,
    -- Losses measured from a zero-sequence excitation test.
    `lossZero` DOUBLE PRECISION NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Temperature at which the test is conducted.
    `temperature` DOUBLE PRECISION NOT NULL,
    -- Transformer end that current is applied to in this no-load test.
    `EnergisedEnd` varchar(50) NOT NULL
);

-- Overhead wire data.
CREATE TABLE `OverheadWireInfo`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- (if there is a different core material) Radius of the central core.
    `coreRadius` DOUBLE PRECISION NOT NULL,
    -- (if used) Number of strands in the steel core.
    `coreStrandCount` INTEGER NOT NULL,
    -- Geometric mean radius. If we replace the conductor by a thin walled tube
    -- of radius GMR, then its reactance is identical to the reactance of the
    -- actual conductor.
    `gmr` DOUBLE PRECISION NOT NULL,
    -- True if conductor is insulated.
    `insulated` CHAR(1) NOT NULL,
    -- (if insulated conductor) Material used for insulation.
    `insulationMaterial` varchar(50),
    -- (if insulated conductor) Thickness of the insulation.
    `insulationThickness` DOUBLE PRECISION,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- AC resistance per unit length of the conductor at 25 °C.
    `rAC25` DOUBLE PRECISION NOT NULL,
    -- AC resistance per unit length of the conductor at 50 °C.
    `rAC50` DOUBLE PRECISION NOT NULL,
    -- AC resistance per unit length of the conductor at 75 °C.
    `rAC75` DOUBLE PRECISION NOT NULL,
    -- Outside radius of the wire.
    `radius` DOUBLE PRECISION NOT NULL,
    -- Current carrying capacity of the wire under stated thermal conditions.
    `ratedCurrent` DOUBLE PRECISION NOT NULL,
    -- DC resistance per unit length of the conductor at 20 °C.
    `rDC20` DOUBLE PRECISION NOT NULL,
    -- Describes the wire gauge or cross section (e.g., 4/0, #2, 336.5).
    `sizeDescription`  varchar(50) NOT NULL,
    -- Number of strands in the conductor.
    `strandCount` INTEGER NOT NULL
);

-- Impedance and admittance parameters per unit length for n-wire unbalanced
-- lines, in matrix form.
CREATE TABLE `PerLengthPhaseImpedance`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- Number of phase, neutral, and other wires retained. Constrains the number
    -- of matrix elements and the phase codes that can be used with this matrix.
    `conductorCount` INTEGER NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL
);

-- Sequence impedance and admittance parameters per unit length, for transposed
-- lines of 1, 2, or 3 phases. For 1-phase lines, define x=x0=xself. For 2-phase
-- lines, define x=xs-xm and x0=xs+xm.
CREATE TABLE `PerLengthSequenceImpedance`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- Zero sequence shunt (charging) susceptance, per unit of length.
    `b0ch` DOUBLE PRECISION NOT NULL,
    -- Positive sequence shunt (charging) susceptance, per unit of length.
    `bch` DOUBLE PRECISION NOT NULL,
    -- Zero sequence shunt (charging) conductance, per unit of length.
    `g0ch` DOUBLE PRECISION NOT NULL,
    -- Positive sequence shunt (charging) conductance, per unit of length.
    `gch` DOUBLE PRECISION NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Positive sequence series resistance, per unit of length.
    `r` DOUBLE PRECISION NOT NULL,
    -- Zero sequence series resistance, per unit of length.
    `r0` DOUBLE PRECISION NOT NULL,
    -- Positive sequence series reactance, per unit of length.
    `x` DOUBLE PRECISION NOT NULL,
    -- Zero sequence series reactance, per unit of length.
    `x0` DOUBLE PRECISION NOT NULL
);

-- Enumeration of phase identifiers. Allows designation of phases for both
-- transmission and distribution equipment, circuits and loads.
-- Residential and small commercial loads are often served from single-phase,
-- or split-phase, secondary circuits. For example of s12N, phases 1 and 2
-- refer to hot wires that are 180 degrees out of phase, while N refers to
-- the neutral wire. Through single-phase transformer connections, these secondary
-- circuits may be served from one or two of the primary phases A, B, and
-- C. For three-phase loads, use the A, B, C phase codes instead of s12N.
CREATE TABLE `PhaseCode` ( `name`  varchar(50) UNIQUE );
-- Phase A.
INSERT INTO `PhaseCode` ( `name` ) VALUES ( 'A' );
-- Phases A and B.
INSERT INTO `PhaseCode` ( `name` ) VALUES ( 'AB' );
-- Phases A, B, and C.
INSERT INTO `PhaseCode` ( `name` ) VALUES ( 'ABC' );
-- Phases A, B, C, and N.
INSERT INTO `PhaseCode` ( `name` ) VALUES ( 'ABCN' );
-- Phases A, B, and neutral.
INSERT INTO `PhaseCode` ( `name` ) VALUES ( 'ABN' );
-- Phases A and C.
INSERT INTO `PhaseCode` ( `name` ) VALUES ( 'AC' );
-- Phases A, C and neutral.
INSERT INTO `PhaseCode` ( `name` ) VALUES ( 'ACN' );
-- Phases A and neutral.
INSERT INTO `PhaseCode` ( `name` ) VALUES ( 'AN' );
-- Phase B.
INSERT INTO `PhaseCode` ( `name` ) VALUES ( 'B' );
-- Phases B and C.
INSERT INTO `PhaseCode` ( `name` ) VALUES ( 'BC' );
-- Phases B, C, and neutral.
INSERT INTO `PhaseCode` ( `name` ) VALUES ( 'BCN' );
-- Phases B and neutral.
INSERT INTO `PhaseCode` ( `name` ) VALUES ( 'BN' );
-- Phase C.
INSERT INTO `PhaseCode` ( `name` ) VALUES ( 'C' );
-- Phases C and neutral.
INSERT INTO `PhaseCode` ( `name` ) VALUES ( 'CN' );
-- Neutral phase.
INSERT INTO `PhaseCode` ( `name` ) VALUES ( 'N' );
-- Secondary phase 1.
INSERT INTO `PhaseCode` ( `name` ) VALUES ( 's1' );
-- Secondary phase 1 and 2.
INSERT INTO `PhaseCode` ( `name` ) VALUES ( 's12' );
-- Secondary phases 1, 2, and neutral.
INSERT INTO `PhaseCode` ( `name` ) VALUES ( 's12N' );
-- Secondary phase 1 and neutral.
INSERT INTO `PhaseCode` ( `name` ) VALUES ( 's1N' );
-- Secondary phase 2.
INSERT INTO `PhaseCode` ( `name` ) VALUES ( 's2' );
-- Secondary phase 2 and neutral.
INSERT INTO `PhaseCode` ( `name` ) VALUES ( 's2N' );

-- Triplet of resistance, reactance, and susceptance matrix element values.
CREATE TABLE `PhaseImpedanceData`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- Susceptance matrix element value, per length of unit.
    `b` DOUBLE PRECISION NOT NULL,
    -- Resistance matrix element value, per length of unit.
    `r` DOUBLE PRECISION NOT NULL,
    -- Column-wise element index, assuming a symmetrical matrix. Ranges from 1
    -- to N + N*(N-1)/2.
    `sequenceNumber` INTEGER NOT NULL,
    -- Reactance matrix element value, per length of unit.
    `x` DOUBLE PRECISION NOT NULL,
    -- Conductor phase impedance to which this data belongs.
    `PhaseImpedance` varchar(50) NOT NULL
);

-- The configuration of phase connections for a single terminal device such
-- as a load or capactitor.
CREATE TABLE `PhaseShuntConnectionKind` ( `name`  varchar(50) UNIQUE );
-- Delta connection.
INSERT INTO `PhaseShuntConnectionKind` ( `name` ) VALUES ( 'D' );
-- Independent winding, for single-phase connections.
INSERT INTO `PhaseShuntConnectionKind` ( `name` ) VALUES ( 'I' );
-- Wye connection.
INSERT INTO `PhaseShuntConnectionKind` ( `name` ) VALUES ( 'Y' );
-- Wye, with neutral brought out for grounding.
INSERT INTO `PhaseShuntConnectionKind` ( `name` ) VALUES ( 'Yn' );

-- Set of spatial coordinates that determine a point, defined in the coordinate
-- system specified in 'Location.CoordinateSystem'. Use a single position
-- point instance to desribe a point-oriented location. Use a sequence of
-- position points to describe a line-oriented object (physical location of
-- non-point oriented objects like cables or lines), or area of an object
-- (like a substation or a geographical zone - in this case, have first and
-- last position point with the same values).
CREATE TABLE `PositionPoint`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- Zero-relative sequence number of this point within a series of points.
    `sequenceNumber` INTEGER NOT NULL,
    -- X axis position.
    `xPosition`  varchar(50) NOT NULL,
    -- Y axis position.
    `yPosition`  varchar(50) NOT NULL,
    -- Location described by this position point.
    `Location` varchar(50) NOT NULL
);

-- An electrical device consisting of two or more coupled windings, with or
-- without a magnetic core, for introducing mutual coupling between electric
-- circuits. Transformers can be used to control voltage and phase shift (active
-- power flow).
-- A power transformer may be composed of separate transformer tanks that
-- need not be identical.
-- A power transformer can be modeled with or without tanks and is intended
-- for use in both balanced and unbalanced representations. A power transformer
-- typically has two terminals, but may have one (grounding), three or more
-- terminals.
-- The inherited association ConductingEquipment.BaseVoltage should not be
-- used. The association from TransformerEnd to BaseVoltage should be used
-- instead.
CREATE TABLE `PowerTransformer`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Vector group of the transformer for protective relaying, e.g., Dyn1. For
    -- unbalanced transformers, this may not be simply determined from the constituent
    -- winding connections and phase angle dispacements.
    -- The vectorGroup string consists of the following components in the order
    -- listed: high voltage winding connection, mid voltage winding connection
    -- (for three winding transformers), phase displacement clock number from
    -- 0 to 11, low voltage winding connection
    -- phase displacement clock number from 0 to 11. The winding connections are
    -- D (delta), Y (wye), YN (wye with neutral), Z (zigzag), ZN (zigzag with
    -- neutral), A (auto transformer). Upper case means the high voltage, lower
    -- case mid or low. The high voltage winding always has clock postion 0 and
    -- is not included in the vector group string. Some examples: YNy0 (two winding
    -- wye to wye with no phase displacement), YNd11 (two winding wye to delta
    -- with 330 degrees phase displacement), YNyn0d5 (three winding transformer
    -- wye with neutral high voltgage, wye with neutral mid voltgage and no phase
    -- displacement, delta low voltage with 150 degrees displacement).
    -- Phase displacement is defined as the angular difference between the phasors
    -- representing the voltages between the neutral point (real or imaginary)
    -- and the corresponding terminals of two windings, a positive sequence voltage
    -- system being applied to the high-voltage terminals, following each other
    -- in alphabetical sequence if they are lettered, or in numerical sequence
    -- if they are numbered: the phasors are assumed to rotate in a counter-clockwise
    -- sense.
    `vectorGroup`  varchar(50) NOT NULL,
    -- Container of this equipment.
    `EquipmentContainer` varchar(50) NOT NULL,
    -- Location of this power system resource.
    `Location` varchar(50) NOT NULL
);

-- A PowerTransformerEnd is associated with each Terminal of a PowerTransformer.
-- The impedance values r, r0, x, and x0 of a PowerTransformerEnd represents
-- a star equivalent as follows
-- 1) for a two Terminal PowerTransformer the high voltage PowerTransformerEnd
-- has non zero values on r, r0, x, and x0 while the low voltage PowerTransformerEnd
-- has zero values for r, r0, x, and x0.
-- 2) for a three Terminal PowerTransformer the three PowerTransformerEnds
-- represents a star equivalent with each leg in the star represented by r,
-- r0, x, and x0 values.
-- 3) for a PowerTransformer with more than three Terminals the PowerTransformerEnd
-- impedance values cannot be used. Instead use the TransformerMeshImpedance
-- or split the transformer into multiple PowerTransformers.
CREATE TABLE `PowerTransformerEnd`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- Kind of connection.
    `connectionKind` varchar(50) NOT NULL,
    -- Number for this transformer end, corresponding to the end's order in the
    -- power transformer vector group or phase angle clock number. Highest voltage
    -- winding should be 1. Each end within a power transformer should have a
    -- unique subsequent end number. Note the transformer end number need not
    -- match the terminal sequence number.
    `endNumber` INTEGER NOT NULL,
    -- (for Yn and Zn connections) True if the neutral is solidly grounded.
    `grounded` CHAR(1) NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Terminal voltage phase angle displacement where 360 degrees are represented
    -- with clock hours. The valid values are 0 to 11. For example, for the secondary
    -- side end of a transformer with vector group code of 'Dyn11', specify the
    -- connection kind as wye with neutral and specify the phase angle of the
    -- clock as 11. The clock value of the transformer end number specified as
    -- 1, is assumed to be zero. Note the transformer end number is not assumed
    -- to be the same as the terminal sequence number.
    `phaseAngleClock` INTEGER NOT NULL,
    -- Resistance (star-model) of the transformer end.
    -- The attribute shall be equal or greater than zero for non-equivalent transformers.
    `r` DOUBLE PRECISION NOT NULL,
    -- Normal apparent power rating.
    -- The attribute shall be a positive value. For a two-winding transformer
    -- the values for the high and low voltage sides shall be identical.
    `ratedS` DOUBLE PRECISION NOT NULL,
    -- Rated voltage: phase-phase for three-phase windings, and either phase-phase
    -- or phase-neutral for single-phase windings.
    -- A high voltage side, as given by TransformerEnd.endNumber, shall have a
    -- ratedU that is greater or equal than ratedU for the lower voltage sides.
    `ratedU` DOUBLE PRECISION NOT NULL,
    -- (for Yn and Zn connections) Resistance part of neutral impedance where
    -- 'grounded' is true.
    `rground` DOUBLE PRECISION,
    -- (for Yn and Zn connections) Reactive part of neutral impedance where 'grounded'
    -- is true.
    `xground` DOUBLE PRECISION,
    -- Base voltage of the transformer end. This is essential for PU calculation.
    `BaseVoltage` varchar(50) NOT NULL,
    -- The power transformer of this power transformer end.
    `PowerTransformer` varchar(50) NOT NULL,
    -- Terminal of the power transformer to which this transformer end belongs.
    `Terminal` varchar(50) NOT NULL
);

-- Set of power transformer data, from an equipment library.
CREATE TABLE `PowerTransformerInfo`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL
);

-- A tap changer that changes the voltage ratio impacting the voltage magnitude
-- but not the phase angle across the transformer.
CREATE TABLE `RatioTapChanger`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- Specifies the regulation status of the equipment. True is regulating, false
    -- is not regulating.
    `controlEnabled` CHAR(1) NOT NULL,
    -- Highest possible tap step position, advance from neutral.
    -- The attribute shall be greater than lowStep.
    `highStep` INTEGER NOT NULL,
    -- For an LTC, the delay for initial tap changer operation (first step change)
    `initialDelay` DOUBLE PRECISION NOT NULL,
    -- Lowest possible tap step position, retard from neutral
    `lowStep` INTEGER NOT NULL,
    -- Specifies whether or not a TapChanger has load tap changing capabilities.
    `ltcFlag` CHAR(1) NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- The neutral tap step position for this winding.
    -- The attribute shall be equal or greater than lowStep and equal or less
    -- than highStep.
    `neutralStep` INTEGER NOT NULL,
    -- Voltage at which the winding operates at the neutral tap setting.
    `neutralU` DOUBLE PRECISION NOT NULL,
    -- The tap step position used in `normal` network operation for this winding.
    -- For a `Fixed` tap changer indicates the current physical tap setting.
    -- The attribute shall be equal or greater than lowStep and equal or less
    -- than highStep.
    `normalStep` INTEGER NOT NULL,
    -- Tap changer position.
    -- Starting step for a steady state solution. Non integer values are allowed
    -- to support continuous tap variables. The reasons for continuous value are
    -- to support study cases where no discrete tap changers has yet been designed,
    -- a solutions where a narrow voltage band force the tap step to oscillate
    -- or accommodate for a continuous solution as input.
    -- The attribute shall be equal or greater than lowStep and equal or less
    -- than highStep.
    `step` DOUBLE PRECISION NOT NULL,
    -- Tap step increment, in per cent of nominal voltage, per step position.
    `stepVoltageIncrement` DOUBLE PRECISION NOT NULL,
    -- For an LTC, the delay for subsequent tap changer operation (second and
    -- later step changes)
    `subsequentDelay` DOUBLE PRECISION NOT NULL,
    -- Specifies the regulation control mode (voltage or reactive) of the RatioTapChanger.
    `tculControlMode` varchar(50) NOT NULL,
    -- Location of this power system resource.
    `Location` varchar(50) NOT NULL,
    -- The regulating control scheme in which this tap changer participates.
    `TapChangerControl` varchar(50) NOT NULL,
    -- Transformer end to which this ratio tap changer belongs.
    `TransformerEnd` varchar(50) NOT NULL
);

-- Pole-mounted fault interrupter with built-in phase and ground relays, current
-- transformer (CT), and supplemental controls.
CREATE TABLE `Recloser`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The maximum fault current a breaking device can break safely under prescribed
    -- conditions of use.
    `breakingCapacity` DOUBLE PRECISION NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- The attribute is used in cases when no Measurement for the status value
    -- is present. If the Switch has a status measurement the Discrete.normalValue
    -- is expected to match with the Switch.normalOpen.
    `normalOpen` CHAR(1) NOT NULL,
    -- The attribute tells if the switch is considered open when used as input
    -- to topology processing.
    `open` CHAR(1) NOT NULL,
    -- The maximum continuous current carrying capacity in amps governed by the
    -- device material and construction.
    `ratedCurrent` DOUBLE PRECISION NOT NULL,
    -- Branch is retained in a bus branch model. The flow through retained switches
    -- will normally be calculated in power flow.
    `retained` CHAR(1) NOT NULL,
    -- Base voltage of this conducting equipment. Use only when there is no voltage
    -- level container used and only one base voltage applies. For example, not
    -- used for transformers.
    `BaseVoltage` varchar(50) NOT NULL,
    -- Container of this equipment.
    `EquipmentContainer` varchar(50) NOT NULL,
    -- Location of this power system resource.
    `Location` varchar(50) NOT NULL
);

-- Specifies a set of equipment that works together to control a power system
-- quantity such as voltage or flow.
-- Remote bus voltage control is possible by specifying the controlled terminal
-- located at some place remote from the controlling equipment.
-- In case multiple equipment, possibly of different types, control same terminal
-- there must be only one RegulatingControl at that terminal. The most specific
-- subtype of RegulatingControl shall be used in case such equipment participate
-- in the control, e.g. TapChangerControl for tap changers.
-- For flow control load sign convention is used, i.e. positive sign means
-- flow out from a TopologicalNode (bus) into the conducting equipment.
CREATE TABLE `RegulatingControl`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The regulation is performed in a discrete mode. This applies to equipment
    -- with discrete controls, e.g. tap changers and shunt compensators.
    `discrete` CHAR(1) NOT NULL,
    -- The flag tells if regulation is enabled.
    `enabled` CHAR(1) NOT NULL,
    -- The regulating control mode presently available. This specification allows
    -- for determining the kind of regulation without need for obtaining the units
    -- from a schedule.
    `mode` varchar(50) NOT NULL,
    -- Phase voltage controlling this regulator, measured at regulator location.
    `monitoredPhase` varchar(50) NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- This is a deadband used with discrete control to avoid excessive update
    -- of controls like tap changers and shunt compensator banks while regulating.
    -- The units of those appropriate for the mode.
    `targetDeadband` DOUBLE PRECISION NOT NULL,
    -- The target value specified for case input. This value can be used for the
    -- target value without the use of schedules. The value has the units appropriate
    -- to the mode attribute.
    `targetValue` DOUBLE PRECISION NOT NULL,
    -- Location of this power system resource.
    `Location` varchar(50) NOT NULL,
    -- The terminal associated with this regulating control. The terminal is associated
    -- instead of a node, since the terminal could connect into either a topological
    -- node (bus in bus-branch model) or a connectivity node (detailed switch
    -- model). Sometimes it is useful to model regulation at a terminal of a bus
    -- bar object since the bus bar can be present in both a bus-branch model
    -- or a model with switch detail.
    `Terminal` varchar(50) NOT NULL,
	RegulatingCondEq varchar(50)
);

-- The kind of regulation model. For example regulating voltage, reactive
-- power, active power, etc.
CREATE TABLE `RegulatingControlModeKind` ( `name`  varchar(50) UNIQUE );
-- Active power is specified.
INSERT INTO `RegulatingControlModeKind` ( `name` ) VALUES ( 'activePower' );
-- Admittance is specified.
INSERT INTO `RegulatingControlModeKind` ( `name` ) VALUES ( 'admittance' );
-- Current flow is specified.
INSERT INTO `RegulatingControlModeKind` ( `name` ) VALUES ( 'currentFlow' );
-- Power factor is specified.
INSERT INTO `RegulatingControlModeKind` ( `name` ) VALUES ( 'powerFactor' );
-- Reactive power is specified.
INSERT INTO `RegulatingControlModeKind` ( `name` ) VALUES ( 'reactivePower' );
-- Control switches on/off based on the local temperature (i.e., a thermostat).
INSERT INTO `RegulatingControlModeKind` ( `name` ) VALUES ( 'temperature' );
-- Control switches on/off by time of day. The times may change on the weekend,
-- or in different seasons.
INSERT INTO `RegulatingControlModeKind` ( `name` ) VALUES ( 'timeScheduled' );
-- Voltage is specified.
INSERT INTO `RegulatingControlModeKind` ( `name` ) VALUES ( 'voltage' );

-- Automatic switch that will lock open to isolate a faulted section. It may,
-- or may not, have load breaking capability. Its primary purpose is to provide
-- fault sectionalising at locations where the fault current is either too
-- high, or too low, for proper coordination of fuses.
CREATE TABLE `Sectionaliser`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- The attribute is used in cases when no Measurement for the status value
    -- is present. If the Switch has a status measurement the Discrete.normalValue
    -- is expected to match with the Switch.normalOpen.
    `normalOpen` CHAR(1) NOT NULL,
    -- The attribute tells if the switch is considered open when used as input
    -- to topology processing.
    `open` CHAR(1) NOT NULL,
    -- The maximum continuous current carrying capacity in amps governed by the
    -- device material and construction.
    `ratedCurrent` DOUBLE PRECISION NOT NULL,
    -- Branch is retained in a bus branch model. The flow through retained switches
    -- will normally be calculated in power flow.
    `retained` CHAR(1) NOT NULL,
    -- Base voltage of this conducting equipment. Use only when there is no voltage
    -- level container used and only one base voltage applies. For example, not
    -- used for transformers.
    `BaseVoltage` varchar(50) NOT NULL,
    -- Container of this equipment.
    `EquipmentContainer` varchar(50) NOT NULL,
    -- Location of this power system resource.
    `Location` varchar(50) NOT NULL
);

-- Short-circuit test results determine mesh impedance parameters. They include
-- load losses and leakage impedances. For three-phase windings, the excitation
-- can be a positive sequence (the default) or a zero sequence. There shall
-- be at least one grounded winding.
CREATE TABLE `ShortCircuitTest`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- Base power at which the tests are conducted, usually equal to the rateds
    -- of one of the involved transformer ends.
    `basePower` DOUBLE PRECISION NOT NULL,
    -- Tap step number for the energised end of the test pair.
    `energisedEndStep` INTEGER NOT NULL,
    -- Tap step number for the grounded end of the test pair.
    `groundedEndStep` INTEGER NOT NULL,
    -- Leakage impedance measured from a positive-sequence or single-phase short-circuit
    -- test.
    `leakageImpedance` DOUBLE PRECISION NOT NULL,
    -- Leakage impedance measured from a zero-sequence short-circuit test.
    `leakageImpedanceZero` DOUBLE PRECISION NOT NULL,
    -- Load losses from a positive-sequence or single-phase short-circuit test.
    `loss` DOUBLE PRECISION NOT NULL,
    -- Load losses from a zero-sequence short-circuit test.
    `lossZero` DOUBLE PRECISION NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Temperature at which the test is conducted.
    `temperature` DOUBLE PRECISION NOT NULL,
    -- Transformer end that voltage is applied to in this short-circuit test.
    -- The test voltage is chosen to induce rated current in the energised end.
    `EnergisedEnd` varchar(50) NOT NULL
);

-- Enumeration of single phase identifiers. Allows designation of single phases
-- for both transmission and distribution equipment, circuits and loads.
CREATE TABLE `SinglePhaseKind` ( `name`  varchar(50) UNIQUE );
-- Phase A.
INSERT INTO `SinglePhaseKind` ( `name` ) VALUES ( 'A' );
-- Phase B.
INSERT INTO `SinglePhaseKind` ( `name` ) VALUES ( 'B' );
-- Phase C.
INSERT INTO `SinglePhaseKind` ( `name` ) VALUES ( 'C' );
-- Neutral.
INSERT INTO `SinglePhaseKind` ( `name` ) VALUES ( 'N' );
-- Secondary phase 1.
INSERT INTO `SinglePhaseKind` ( `name` ) VALUES ( 's1' );
-- Secondary phase 2.
INSERT INTO `SinglePhaseKind` ( `name` ) VALUES ( 's2' );

-- A subset of a geographical region of a power system network model.
CREATE TABLE `SubGeographicalRegion`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- The geographical region to which this sub-geographical region is within.
    `Region` varchar(50) NOT NULL
);

-- The SvInjection is reporting the calculated bus injection minus the sum
-- of the terminal flows. The terminal flow is positive out from the bus (load
-- sign convention) and bus injection has positive flow into the bus. SvInjection
-- may have the remainder after state estimation or slack after power flow
-- calculation.
CREATE TABLE `SvInjection`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The active power injected into the bus in addition to injections from equipment
    -- terminals. Positive sign means injection into the TopologicalNode (bus).
    `pInjection` DOUBLE PRECISION NOT NULL,
    -- The reactive power injected into the bus in addition to injections from
    -- equipment terminals. Positive sign means injection into the TopologicalNode
    -- (bus).
    `qInjection` DOUBLE PRECISION NOT NULL,
    -- The topological node associated with the flow injection state variable.
    `TopologicalNode` varchar(50) NOT NULL
);

-- State variable for power flow. Load convention is used for flow direction.
-- This means flow out from the TopologicalNode into the equipment is positive.
CREATE TABLE `SvPowerFlow`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The active power flow. Load sign convention is used, i.e. positive sign
    -- means flow out from a TopologicalNode (bus) into the conducting equipment.
    `p` DOUBLE PRECISION NOT NULL,
    -- The reactive power flow. Load sign convention is used, i.e. positive sign
    -- means flow out from a TopologicalNode (bus) into the conducting equipment.
    `q` DOUBLE PRECISION NOT NULL,
    -- The terminal associated with the power flow state variable.
    `Terminal` varchar(50) NOT NULL
);

-- State variable for the number of sections in service for a shunt compensator.
CREATE TABLE `SvShuntCompensatorSections`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The number of sections in service as a continous variable. To get integer
    -- value scale with ShuntCompensator.bPerSection.
    `sections` DOUBLE PRECISION NOT NULL,
    -- The shunt compensator for which the state applies.
    `ShuntCompensator` varchar(50) NOT NULL
);

-- State variable for status.
CREATE TABLE `SvStatus`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The in service status as a result of topology processing.
    `inService` CHAR(1) NOT NULL,
    -- The conducting equipment associated with the status state variable.
    `ConductingEquipment` varchar(50) NOT NULL
);

-- State variable for transformer tap step. This class is to be used for taps
-- of LTC (load tap changing) transformers, not fixed tap transformers.
CREATE TABLE `SvTapStep`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The floating point tap position. This is not the tap ratio, but rather
    -- the tap step position as defined by the related tap changer model and normally
    -- is constrained to be within the range of minimum and maximum tap positions.
    `position` DOUBLE PRECISION NOT NULL,
    -- The tap changer associated with the tap step state.
    `TapChanger` varchar(50) NOT NULL
);

-- State variable for voltage.
CREATE TABLE `SvVoltage`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The voltage angle of the topological node complex voltage with respect
    -- to system reference.
    `angle` DOUBLE PRECISION NOT NULL,
    -- The voltage magnitude of the topological node.
    `v` DOUBLE PRECISION NOT NULL,
    -- The topological node associated with the voltage state.
    `TopologicalNode` varchar(50) NOT NULL
);

-- Single phase of a multi-phase switch when its attributes might be different
-- per phase.
CREATE TABLE `SwitchPhase`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The attribute tells if the switch is considered closed when used as input
    -- to topology processing.
    `closed` CHAR(1) NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Used in cases when no Measurement for the status value is present. If the
    -- SwitchPhase has a status measurement the Discrete.normalValue is expected
    -- to match with this value.
    `normalOpen` CHAR(1) NOT NULL,
    -- Phase of this SwitchPhase on the side with terminal sequence number equal
    -- 1. Should be a phase contained in that terminal&rsquo;s phases attribute.
    `phaseSide1` varchar(50) NOT NULL,
    -- Phase of this SwitchPhase on the side with terminal sequence number equal
    -- 2. Should be a phase contained in that terminal&rsquo;s Terminal.phases
    -- attribute.
    `phaseSide2` varchar(50) NOT NULL,
    -- Location of this power system resource.
    `Location` varchar(50) NOT NULL,
    -- The switch of the switch phase.
    `Switch` varchar(50) NOT NULL
);

-- Describes behavior specific to tap changers, e.g. how the voltage at the
-- end of a line varies with the load level and compensation of the voltage
-- drop by tap adjustment.
CREATE TABLE `TapChangerControl`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The regulation is performed in a discrete mode. This applies to equipment
    -- with discrete controls, e.g. tap changers and shunt compensators.
    `discrete` CHAR(1) NOT NULL,
    -- The flag tells if regulation is enabled.
    `enabled` CHAR(1) NOT NULL,
    -- Maximum allowed regulated voltage on the PT secondary, regardless of line
    -- drop compensation. Sometimes referred to as first-house protection.
    `limitVoltage` DOUBLE PRECISION NOT NULL,
    -- If true, the line drop compensation is to be applied.
    `lineDropCompensation` CHAR(1) NOT NULL,
    -- Line drop compensator resistance setting for normal (forward) power flow.
    `lineDropR` DOUBLE PRECISION NOT NULL,
    -- Line drop compensator reactance setting for normal (forward) power flow.
    `lineDropX` DOUBLE PRECISION NOT NULL,
    -- The regulating control mode presently available. This specification allows
    -- for determining the kind of regulation without need for obtaining the units
    -- from a schedule.
    `mode` varchar(50) NOT NULL,
    -- Phase voltage controlling this regulator, measured at regulator location.
    `monitoredPhase` varchar(50) NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Line drop compensator resistance setting for reverse power flow.
    `reverseLineDropR` DOUBLE PRECISION NOT NULL,
    -- Line drop compensator reactance setting for reverse power flow.
    `reverseLineDropX` DOUBLE PRECISION NOT NULL,
    -- This is a deadband used with discrete control to avoid excessive update
    -- of controls like tap changers and shunt compensator banks while regulating.
    -- The units of those appropriate for the mode.
    `targetDeadband` DOUBLE PRECISION NOT NULL,
    -- The target value specified for case input. This value can be used for the
    -- target value without the use of schedules. The value has the units appropriate
    -- to the mode attribute.
    `targetValue` DOUBLE PRECISION NOT NULL,
    -- Location of this power system resource.
    `Location` varchar(50) NOT NULL,
    -- The terminal associated with this regulating control. The terminal is associated
    -- instead of a node, since the terminal could connect into either a topological
    -- node (bus in bus-branch model) or a connectivity node (detailed switch
    -- model). Sometimes it is useful to model regulation at a terminal of a bus
    -- bar object since the bus bar can be present in both a bus-branch model
    -- or a model with switch detail.
    `Terminal` varchar(50) NOT NULL
);

-- Tap changer data.
CREATE TABLE `TapChangerInfo`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- Built-in current transformer primary rating.
    `ctRating` DOUBLE PRECISION NOT NULL,
    -- Built-in current transducer ratio.
    `ctRatio` DOUBLE PRECISION NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Built-in voltage transducer ratio.
    `ptRatio` DOUBLE PRECISION NOT NULL
);

-- Tape shield cable data.
CREATE TABLE `TapeShieldCableInfo`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- (if there is a different core material) Radius of the central core.
    `coreRadius` DOUBLE PRECISION NOT NULL,
    -- (if used) Number of strands in the steel core.
    `coreStrandCount` INTEGER NOT NULL,
    -- Diameter over the core, including any semi-con screen; should be the insulating
    -- layer's inside diameter.
    `diameterOverCore` DOUBLE PRECISION NOT NULL,
    -- Diameter over the insulating layer, excluding outer screen.
    `diameterOverInsulation` DOUBLE PRECISION NOT NULL,
    -- Diameter over the outermost jacketing layer.
    `diameterOverJacket` DOUBLE PRECISION NOT NULL,
    -- Diameter over the outer screen; should be the shield's inside diameter.
    `diameterOverScreen` DOUBLE PRECISION NOT NULL,
    -- Geometric mean radius. If we replace the conductor by a thin walled tube
    -- of radius GMR, then its reactance is identical to the reactance of the
    -- actual conductor.
    `gmr` DOUBLE PRECISION NOT NULL,
    -- True if conductor is insulated.
    `insulated` CHAR(1) NOT NULL,
    -- (if insulated conductor) Material used for insulation.
    `insulationMaterial` varchar(50) NOT NULL,
    -- (if insulated conductor) Thickness of the insulation.
    `insulationThickness` DOUBLE PRECISION NOT NULL,
    -- True if wire strands are extruded in a way to fill the voids in the cable.
    `isStrandFill` CHAR(1) NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Maximum nominal design operating temperature.
    `nominalTemperature` DOUBLE PRECISION NOT NULL,
    -- AC resistance per unit length of the conductor at 25 °C.
    `rAC25` DOUBLE PRECISION NOT NULL,
    -- AC resistance per unit length of the conductor at 50 °C.
    `rAC50` DOUBLE PRECISION NOT NULL,
    -- AC resistance per unit length of the conductor at 75 °C.
    `rAC75` DOUBLE PRECISION NOT NULL,
    -- Outside radius of the wire.
    `radius` DOUBLE PRECISION NOT NULL,
    -- Current carrying capacity of the wire under stated thermal conditions.
    `ratedCurrent` DOUBLE PRECISION NOT NULL,
    -- DC resistance per unit length of the conductor at 20 °C.
    `rDC20` DOUBLE PRECISION NOT NULL,
    -- True if sheath / shield is used as a neutral (i.e., bonded).
    `sheathAsNeutral` CHAR(1) NOT NULL,
    -- Describes the wire gauge or cross section (e.g., 4/0, #2, 336.5).
    `sizeDescription`  varchar(50) NOT NULL,
    -- Number of strands in the conductor.
    `strandCount` INTEGER NOT NULL,
    -- Percentage of the tape shield width that overlaps in each wrap, typically
    -- 10% to 25%.
    `tapeLap` DOUBLE PRECISION NOT NULL,
    -- Thickness of the tape shield, before wrapping.
    `tapeThickness` DOUBLE PRECISION NOT NULL
);

-- An AC electrical connection point to a piece of conducting equipment. Terminals
-- are connected at physical connection points called connectivity nodes.
CREATE TABLE `Terminal`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- The conducting equipment of the terminal. Conducting equipment have terminals
    -- that may be connected to other conducting equipment terminals via connectivity
    -- nodes or topological nodes.
    `ConductingEquipment` varchar(50) NOT NULL,
    -- The connectivity node to which this terminal connects with zero impedance.
    `ConnectivityNode` varchar(50) NOT NULL
);

-- An electrically connected subset of the network. Topological islands can
-- change as the current network state changes: e.g. due to
-- - disconnect switches or breakers change state in a SCADA/EMS
-- - manual creation, change or deletion of topological nodes in a planning
-- tool.
CREATE TABLE `TopologicalIsland`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- The angle reference for the island. Normally there is one TopologicalNode
    -- that is selected as the angle reference for each island. Other reference
    -- schemes exist, so the association is typically optional.
    `AngleRefTopologicalNode` varchar(50) NOT NULL
);

-- For a detailed substation model a topological node is a set of connectivity
-- nodes that, in the current network state, are connected together through
-- any type of closed switches, including jumpers. Topological nodes change
-- as the current network state changes (i.e., switches, breakers, etc. change
-- state).
-- For a planning model, switch statuses are not used to form topological
-- nodes. Instead they are manually created or deleted in a model builder
-- tool. Topological nodes maintained this way are also called `busses`.
CREATE TABLE `TopologicalNode`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- A topological node belongs to a topological island.
    `TopologicalIsland` varchar(50) NOT NULL
);

-- Control modes for a transformer.
CREATE TABLE `TransformerControlMode` ( `name`  varchar(50) UNIQUE );
-- Reactive power flow control
INSERT INTO `TransformerControlMode` ( `name` ) VALUES ( 'reactive' );
-- Voltage control
INSERT INTO `TransformerControlMode` ( `name` ) VALUES ( 'volt' );

-- The transformer core admittance. Used to specify the core admittance of
-- a transformer in a manner that can be shared among power transformers.
CREATE TABLE `TransformerCoreAdmittance`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- Magnetizing branch susceptance (B mag). The value can be positive or negative.
    `b` DOUBLE PRECISION NOT NULL,
    -- Zero sequence magnetizing branch susceptance.
    `b0` DOUBLE PRECISION NOT NULL,
    -- Magnetizing branch conductance (G mag).
    `g` DOUBLE PRECISION NOT NULL,
    -- Zero sequence magnetizing branch conductance.
    `g0` DOUBLE PRECISION NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- All transformer ends (just one for OSPRREYS) having this core admittance.
    `TransformerEnd` VARCHAR(50) NOT NULL
);

-- Transformer end data.
CREATE TABLE `TransformerEndInfo`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- Kind of connection.
    `connectionKind` varchar(50) NOT NULL,
    -- Apparent power that the winding can carry under emergency conditions (also
    -- called long-term emergency power).
    `emergencyS` DOUBLE PRECISION NOT NULL,
    -- Number for this transformer end, corresponding to the end's order in the
    -- PowerTransformer.vectorGroup attribute. Highest voltage winding should
    -- be 1.
    `endNumber` INTEGER NOT NULL,
    -- Basic insulation level voltage rating.
    `insulationU` DOUBLE PRECISION NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Winding phase angle where 360 degrees are represented with clock hours,
    -- so the valid values are {0, ..., 11}. For example, to express the second
    -- winding in code 'Dyn11', set attributes as follows: 'endNumber'=2, 'connectionKind'
    -- = Yn and 'phaseAngleClock' = 11.
    `phaseAngleClock` INTEGER NOT NULL,
    -- DC resistance.
    `r` DOUBLE PRECISION NOT NULL,
    -- Normal apparent power rating.
    `ratedS` DOUBLE PRECISION NOT NULL,
    -- Rated voltage: phase-phase for three-phase windings, and either phase-phase
    -- or phase-neutral for single-phase windings.
    `ratedU` DOUBLE PRECISION NOT NULL,
    -- Apparent power that this winding can carry for a short period of time (in
    -- emergency).
    `shortTermS` DOUBLE PRECISION NOT NULL,
    -- Transformer tank data that this end description is part of.
    `TransformerTankInfo` varchar(50) NOT NULL
);

-- Transformer mesh impedance (Delta-model) between transformer ends.
-- The typical case is that this class describes the impedance between two
-- transformer ends pair-wise, i.e. the cardinalities at both tranformer end
-- associations are 1. But in cases where two or more transformer ends are
-- modeled the cardinalities are larger than 1.
CREATE TABLE `TransformerMeshImpedance`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Resistance between the 'from' and the 'to' end, seen from the 'from' end.
    `r` DOUBLE PRECISION NOT NULL,
    -- Zero-sequence resistance between the 'from' and the 'to' end, seen from
    -- the 'from' end.
    `r0` DOUBLE PRECISION NOT NULL,
    -- Reactance between the 'from' and the 'to' end, seen from the 'from' end.
    `x` DOUBLE PRECISION NOT NULL,
    -- Zero-sequence reactance between the 'from' and the 'to' end, seen from
    -- the 'from' end.
    `x0` DOUBLE PRECISION NOT NULL,
    -- From end this mesh impedance is connected to. It determines the voltage
    -- reference.
    `FromTransformerEnd` varchar(50) NOT NULL,
    -- All transformer ends this mesh impedance is connected to.
    `ToTransformerEnd` varchar(50) NOT NULL
);

-- An assembly of two or more coupled windings that transform electrical power
-- between voltage levels. These windings are bound on a common core and place
-- in the same tank. Transformer tank can be used to model both single-phase
-- and 3-phase transformers.
CREATE TABLE `TransformerTank`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Container of this equipment.
    `EquipmentContainer` varchar(50) NOT NULL,
    -- Location of this power system resource.
    `Location` varchar(50) NOT NULL,
    -- Bank this transformer belongs to.
    `PowerTransformer` varchar(50) NOT NULL
);

-- Transformer tank end represents an individual winding for unbalanced models
-- or for transformer tanks connected into a bank (and bank is modelled with
-- the PowerTransformer).
CREATE TABLE `TransformerTankEnd`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- Number for this transformer end, corresponding to the end's order in the
    -- power transformer vector group or phase angle clock number. Highest voltage
    -- winding should be 1. Each end within a power transformer should have a
    -- unique subsequent end number. Note the transformer end number need not
    -- match the terminal sequence number.
    `endNumber` INTEGER NOT NULL,
    -- (for Yn and Zn connections) True if the neutral is solidly grounded.
    `grounded` CHAR(1) NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Describes the phases carried by a conducting equipment.
    `phases` varchar(50) NOT NULL,
    -- (for Yn and Zn connections) Resistance part of neutral impedance where
    -- 'grounded' is true.
    `rground` DOUBLE PRECISION,
    -- (for Yn and Zn connections) Reactive part of neutral impedance where 'grounded'
    -- is true.
    `xground` DOUBLE PRECISION,
    -- Base voltage of the transformer end. This is essential for PU calculation.
    `BaseVoltage` varchar(50) NOT NULL,
    -- Terminal of the power transformer to which this transformer end belongs.
    `Terminal` varchar(50) NOT NULL,
    -- Transformer this winding belongs to.
    `TransformerTank` varchar(50) NOT NULL
);

-- Set of transformer tank data, from an equipment library.
CREATE TABLE `TransformerTankInfo`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Power transformer data that this tank description is part of.
    `PowerTransformerInfo` varchar(50) NOT NULL
);

-- Winding connection type.
CREATE TABLE `WindingConnection` ( `name`  varchar(50) UNIQUE );
-- Autotransformer common winding
INSERT INTO `WindingConnection` ( `name` ) VALUES ( 'A' );
-- Delta
INSERT INTO `WindingConnection` ( `name` ) VALUES ( 'D' );
-- Independent winding, for single-phase connections
INSERT INTO `WindingConnection` ( `name` ) VALUES ( 'I' );
-- Wye
INSERT INTO `WindingConnection` ( `name` ) VALUES ( 'Y' );
-- Wye, with neutral brought out for grounding.
INSERT INTO `WindingConnection` ( `name` ) VALUES ( 'Yn' );
-- ZigZag
INSERT INTO `WindingConnection` ( `name` ) VALUES ( 'Z' );
-- ZigZag, with neutral brought out for grounding.
INSERT INTO `WindingConnection` ( `name` ) VALUES ( 'Zn' );

-- Kind of wire insulation.
CREATE TABLE `WireInsulationKind` ( `name`  varchar(50) UNIQUE );
-- Asbestos and varnished cambric wire insulation.
INSERT INTO `WireInsulationKind` ( `name` ) VALUES ( 'asbestosAndVarnishedCambric' );
-- Belted pilc wire insulation.
INSERT INTO `WireInsulationKind` ( `name` ) VALUES ( 'beltedPilc' );
-- Butyl wire insulation.
INSERT INTO `WireInsulationKind` ( `name` ) VALUES ( 'butyl' );
-- Crosslinked polyethylene wire insulation.
INSERT INTO `WireInsulationKind` ( `name` ) VALUES ( 'crosslinkedPolyethylene' );
-- Ethylene propylene rubber wire insulation.
INSERT INTO `WireInsulationKind` ( `name` ) VALUES ( 'ethylenePropyleneRubber' );
-- High nolecular weight polyethylene wire insulation.
INSERT INTO `WireInsulationKind` ( `name` ) VALUES ( 'highMolecularWeightPolyethylene' );
-- High pressure fluid filled wire insulation.
INSERT INTO `WireInsulationKind` ( `name` ) VALUES ( 'highPressureFluidFilled' );
-- Low capacitance rubber wire insulation.
INSERT INTO `WireInsulationKind` ( `name` ) VALUES ( 'lowCapacitanceRubber' );
-- Oil paper wire insulation.
INSERT INTO `WireInsulationKind` ( `name` ) VALUES ( 'oilPaper' );
-- Other kind of wire insulation.
INSERT INTO `WireInsulationKind` ( `name` ) VALUES ( 'other' );
-- Ozone resistant rubber wire insulation.
INSERT INTO `WireInsulationKind` ( `name` ) VALUES ( 'ozoneResistantRubber' );
-- Rubber wire insulation.
INSERT INTO `WireInsulationKind` ( `name` ) VALUES ( 'rubber' );
-- Silicon rubber wire insulation.
INSERT INTO `WireInsulationKind` ( `name` ) VALUES ( 'siliconRubber' );
-- Tree resistant high molecular weight polyethylene wire insulation.
INSERT INTO `WireInsulationKind` ( `name` ) VALUES ( 'treeResistantHighMolecularWeightPolyethylene' );
-- Tree retardant crosslinked polyethylene wire insulation.
INSERT INTO `WireInsulationKind` ( `name` ) VALUES ( 'treeRetardantCrosslinkedPolyethylene' );
-- Unbelted pilc wire insulation.
INSERT INTO `WireInsulationKind` ( `name` ) VALUES ( 'unbeltedPilc' );
-- Varnished cambric cloth wire insulation.
INSERT INTO `WireInsulationKind` ( `name` ) VALUES ( 'varnishedCambricCloth' );
-- Varnished dacron glass wire insulation.
INSERT INTO `WireInsulationKind` ( `name` ) VALUES ( 'varnishedDacronGlass' );

-- Identification, spacing and configuration of the wires of a conductor with
-- respect to a structure.
CREATE TABLE `WirePosition`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Single phase or neutral designation for the wire with this position.
    `phase` varchar(50) NOT NULL,
    -- Signed horizontal distance from the wire at this position to a common reference
    -- point.
    `xCoord` DOUBLE PRECISION NOT NULL,
    -- Signed vertical distance from the wire at this position: above ground (positive
    -- value) or burial depth below ground (negative value).
    `yCoord` DOUBLE PRECISION NOT NULL,
    -- Wire spacing data this wire position belongs to.
    `WireSpacingInfo` varchar(50) NOT NULL
);

-- Wire spacing data that associates multiple wire positions with the line
-- segment, and allows to calculate line segment impedances. Number of phases
-- can be derived from the number of associated wire positions whose phase
-- is not neutral.
CREATE TABLE `WireSpacingInfo`
(
    `mRID`  varchar(50) NOT NULL UNIQUE,
    -- If true, this spacing data describes a cable.
    `isCable` CHAR(1) NOT NULL,
    -- The name is any free human readable and possibly non unique text naming
    -- the object.
    `name`  varchar(50) NOT NULL,
    -- Number of wire sub-conductors in the symmetrical bundle (typically between
    -- 1 and 4).
    `phaseWireCount` INTEGER NOT NULL,
    -- Distance between wire sub-conductors in a symmetrical bundle.
    `phaseWireSpacing` DOUBLE PRECISION NOT NULL,
    -- Usage of the associated wires.
    `usage` varchar(50) NOT NULL
);

-- Kind of wire usage.
CREATE TABLE `WireUsageKind` ( `name`  varchar(50) UNIQUE );
-- Wire is used in medium voltage network.
INSERT INTO `WireUsageKind` ( `name` ) VALUES ( 'distribution' );
-- Other kind of wire usage.
INSERT INTO `WireUsageKind` ( `name` ) VALUES ( 'other' );
-- Wire is used in low voltage circuit.
INSERT INTO `WireUsageKind` ( `name` ) VALUES ( 'secondary' );
-- Wire is used in extra-high voltage or high voltage network.
INSERT INTO `WireUsageKind` ( `name` ) VALUES ( 'transmission' );

-- Manually Added Base Parent Tables for Polymorphic Associations
CREATE TABLE `AssetInfo`
	(
    `mRID`  varchar(50) NOT NULL UNIQUE
	 );
ALTER TABLE `ConcentricNeutralCableInfo` ADD COLUMN `Parent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `ConcentricNeutralCableInfo` ADD FOREIGN KEY ( `Parent` ) REFERENCES `AssetInfo` ( `mRID` );
ALTER TABLE `TapeShieldCableInfo` ADD COLUMN `Parent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `TapeShieldCableInfo` ADD FOREIGN KEY ( `Parent` ) REFERENCES `AssetInfo` ( `mRID` );
ALTER TABLE `OverheadWireInfo` ADD COLUMN `Parent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `OverheadWireInfo` ADD FOREIGN KEY ( `Parent` ) REFERENCES `AssetInfo` ( `mRID` );
ALTER TABLE `WireSpacingInfo` ADD COLUMN `Parent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `WireSpacingInfo` ADD FOREIGN KEY ( `Parent` ) REFERENCES `AssetInfo` ( `mRID` );
ALTER TABLE `TapChangerInfo` ADD COLUMN `Parent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `TapChangerInfo` ADD FOREIGN KEY ( `Parent` ) REFERENCES `AssetInfo` ( `mRID` );
ALTER TABLE `TransformerTankInfo` ADD COLUMN `Parent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `TransformerTankInfo` ADD FOREIGN KEY ( `Parent` ) REFERENCES `AssetInfo` ( `mRID` );

CREATE TABLE `TransformerEnd`
	(
    `mRID`  varchar(50) NOT NULL UNIQUE
	 );
ALTER TABLE `PowerTransformerEnd` ADD COLUMN `Parent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `PowerTransformerEnd` ADD FOREIGN KEY ( `Parent` ) REFERENCES `TransformerEnd` ( `mRID` );
ALTER TABLE `TransformerTankEnd` ADD COLUMN `Parent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `TransformerTankEnd` ADD FOREIGN KEY ( `Parent` ) REFERENCES `TransformerEnd` ( `mRID` );

CREATE TABLE `PerLengthImpedance`
	(
    `mRID`  varchar(50) NOT NULL UNIQUE
	 );
ALTER TABLE `PerLengthPhaseImpedance` ADD COLUMN `Parent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `PerLengthPhaseImpedance` ADD FOREIGN KEY ( `Parent` ) REFERENCES `PerLengthImpedance` ( `mRID` );
ALTER TABLE `PerLengthSequenceImpedance` ADD COLUMN `Parent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `PerLengthSequenceImpedance` ADD FOREIGN KEY ( `Parent` ) REFERENCES `PerLengthImpedance` ( `mRID` );

CREATE TABLE `ConductingEquipment`
	(
    `mRID`  varchar(50) NOT NULL UNIQUE
	 );
ALTER TABLE `ACLineSegment` ADD COLUMN `Parent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `ACLineSegment` ADD FOREIGN KEY ( `Parent` ) REFERENCES `ConductingEquipment` ( `mRID` );
ALTER TABLE `EnergySource` ADD COLUMN `Parent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `EnergySource` ADD FOREIGN KEY ( `Parent` ) REFERENCES `ConductingEquipment` ( `mRID` );
ALTER TABLE `EnergyConsumer` ADD COLUMN `Parent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `EnergyConsumer` ADD FOREIGN KEY ( `Parent` ) REFERENCES `ConductingEquipment` ( `mRID` );
ALTER TABLE `LinearShuntCompensator` ADD COLUMN `Parent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `LinearShuntCompensator` ADD FOREIGN KEY ( `Parent` ) REFERENCES `ConductingEquipment` ( `mRID` );
ALTER TABLE `PowerTransformer` ADD COLUMN `Parent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `PowerTransformer` ADD FOREIGN KEY ( `Parent` ) REFERENCES `ConductingEquipment` ( `mRID` );
ALTER TABLE `Breaker` ADD COLUMN `Parent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `Breaker` ADD FOREIGN KEY ( `Parent` ) REFERENCES `ConductingEquipment` ( `mRID` );
ALTER TABLE `Recloser` ADD COLUMN `Parent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `Recloser` ADD FOREIGN KEY ( `Parent` ) REFERENCES `ConductingEquipment` ( `mRID` );
ALTER TABLE `LoadBreakSwitch` ADD COLUMN `Parent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `LoadBreakSwitch` ADD FOREIGN KEY ( `Parent` ) REFERENCES `ConductingEquipment` ( `mRID` );
ALTER TABLE `Sectionaliser` ADD COLUMN `Parent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `Sectionaliser` ADD FOREIGN KEY ( `Parent` ) REFERENCES `ConductingEquipment` ( `mRID` );
ALTER TABLE `Jumper` ADD COLUMN `Parent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `Jumper` ADD FOREIGN KEY ( `Parent` ) REFERENCES `ConductingEquipment` ( `mRID` );
ALTER TABLE `Fuse` ADD COLUMN `Parent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `Fuse` ADD FOREIGN KEY ( `Parent` ) REFERENCES `ConductingEquipment` ( `mRID` );
ALTER TABLE `Disconnector` ADD COLUMN `Parent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `Disconnector` ADD FOREIGN KEY ( `Parent` ) REFERENCES `ConductingEquipment` ( `mRID` );

CREATE TABLE `Switch`
	(
    `mRID`  varchar(50) NOT NULL UNIQUE
	 );
ALTER TABLE `Breaker` ADD COLUMN `SwtParent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `Breaker` ADD FOREIGN KEY ( `SwtParent` ) REFERENCES `Switch` ( `mRID` );
ALTER TABLE `Recloser` ADD COLUMN `SwtParent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `Recloser` ADD FOREIGN KEY ( `SwtParent` ) REFERENCES `Switch` ( `mRID` );
ALTER TABLE `LoadBreakSwitch` ADD COLUMN `SwtParent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `LoadBreakSwitch` ADD FOREIGN KEY ( `SwtParent` ) REFERENCES `Switch` ( `mRID` );
ALTER TABLE `Sectionaliser` ADD COLUMN `SwtParent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `Sectionaliser` ADD FOREIGN KEY ( `SwtParent` ) REFERENCES `Switch` ( `mRID` );
ALTER TABLE `Jumper` ADD COLUMN `SwtParent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `Jumper` ADD FOREIGN KEY ( `SwtParent` ) REFERENCES `Switch` ( `mRID` );
ALTER TABLE `Fuse` ADD COLUMN `SwtParent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `Fuse` ADD FOREIGN KEY ( `SwtParent` ) REFERENCES `Switch` ( `mRID` );
ALTER TABLE `Disconnector` ADD COLUMN `SwtParent` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `Disconnector` ADD FOREIGN KEY ( `SwtParent` ) REFERENCES `Switch` ( `mRID` );

-- manually added for many-to-many AssetInfo to PowerSystemResource joins (superceding use of the Asset table)
CREATE TABLE `PowerSystemResource`
	(
    `mRID`  varchar(50) NOT NULL UNIQUE
	 );
ALTER TABLE `ACLineSegment` ADD COLUMN `PowerSystemResource` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `ACLineSegment` ADD FOREIGN KEY ( `PowerSystemResource` ) REFERENCES `PowerSystemResource` ( `mRID` );
ALTER TABLE `ACLineSegmentPhase` ADD COLUMN `PowerSystemResource` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `ACLineSegmentPhase` ADD FOREIGN KEY ( `PowerSystemResource` ) REFERENCES `PowerSystemResource` ( `mRID` );
ALTER TABLE `RatioTapChanger` ADD COLUMN `PowerSystemResource` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `RatioTapChanger` ADD FOREIGN KEY ( `PowerSystemResource` ) REFERENCES `PowerSystemResource` ( `mRID` );
ALTER TABLE `TransformerTank` ADD COLUMN `PowerSystemResource` VARCHAR(50) NOT NULL UNIQUE;
ALTER TABLE `TransformerTank` ADD FOREIGN KEY ( `PowerSystemResource` ) REFERENCES `PowerSystemResource` ( `mRID` );
CREATE TABLE `Asset_PowerSystemResourcesJoin`
	(
    `Asset`  varchar(50) NOT NULL,
    `PowerSystemResources`  varchar(50) NOT NULL
	 );
ALTER TABLE `Asset_PowerSystemResourcesJoin` ADD FOREIGN KEY ( `Asset` ) REFERENCES `Asset` ( `mRID` );
ALTER TABLE `Asset_PowerSystemResourcesJoin` ADD FOREIGN KEY ( `PowerSystemResources` ) REFERENCES `PowerSystemResource` ( `mRID` );

-- manually added for one-to-many ShortCircuitTest to TransformerEndInfo joins
CREATE TABLE `ShortCircuitTest_GroundedEndsJoin`
	(
    `ShortCircuitTest`  varchar(50) NOT NULL,
    `GroundedEnds`  varchar(50) NOT NULL
	 );
ALTER TABLE `ShortCircuitTest_GroundedEndsJoin` ADD FOREIGN KEY ( `GroundedEnds` ) REFERENCES `TransformerEndInfo` ( `mRID` );
ALTER TABLE `ShortCircuitTest_GroundedEndsJoin` ADD FOREIGN KEY ( `ShortCircuitTest` ) REFERENCES `ShortCircuitTest` ( `mRID` );

-- association constraint
ALTER TABLE `ACLineSegment` ADD FOREIGN KEY ( `BaseVoltage` ) REFERENCES `BaseVoltage` ( `mRID` );
-- association constraint
ALTER TABLE `ACLineSegment` ADD FOREIGN KEY ( `EquipmentContainer` ) REFERENCES `Line` ( `mRID` );
-- association constraint
ALTER TABLE `ACLineSegment` ADD FOREIGN KEY ( `Location` ) REFERENCES `Location` ( `mRID` );
-- association constraint
ALTER TABLE `ACLineSegment` ADD FOREIGN KEY ( `PerLengthImpedance` ) REFERENCES `PerLengthImpedance` ( `mRID` );
-- association constraint
ALTER TABLE `ACLineSegmentPhase` ADD FOREIGN KEY ( `phase` ) REFERENCES `SinglePhaseKind` ( `name` );
-- association constraint
ALTER TABLE `ACLineSegmentPhase` ADD FOREIGN KEY ( `ACLineSegment` ) REFERENCES `ACLineSegment` ( `mRID` );
-- association constraint
ALTER TABLE `ACLineSegmentPhase` ADD FOREIGN KEY ( `Location` ) REFERENCES `Location` ( `mRID` );
-- association constraint
ALTER TABLE `Asset` ADD FOREIGN KEY ( `AssetInfo` ) REFERENCES `AssetInfo` ( `mRID` );
-- association constraint
ALTER TABLE `Breaker` ADD FOREIGN KEY ( `BaseVoltage` ) REFERENCES `BaseVoltage` ( `mRID` );
-- association constraint
ALTER TABLE `Breaker` ADD FOREIGN KEY ( `EquipmentContainer` ) REFERENCES `Line` ( `mRID` );
-- association constraint
ALTER TABLE `Breaker` ADD FOREIGN KEY ( `Location` ) REFERENCES `Location` ( `mRID` );
-- association constraint
ALTER TABLE `ConcentricNeutralCableInfo` ADD FOREIGN KEY ( `insulationMaterial` ) REFERENCES `WireInsulationKind` ( `name` );
-- association constraint
ALTER TABLE `ConnectivityNode` ADD FOREIGN KEY ( `ConnectivityNodeContainer` ) REFERENCES `Line` ( `mRID` );
-- association constraint
ALTER TABLE `ConnectivityNode` ADD FOREIGN KEY ( `TopologicalNode` ) REFERENCES `TopologicalNode` ( `mRID` );
-- association constraint
ALTER TABLE `Disconnector` ADD FOREIGN KEY ( `BaseVoltage` ) REFERENCES `BaseVoltage` ( `mRID` );
-- association constraint
ALTER TABLE `Disconnector` ADD FOREIGN KEY ( `EquipmentContainer` ) REFERENCES `Line` ( `mRID` );
-- association constraint
ALTER TABLE `Disconnector` ADD FOREIGN KEY ( `Location` ) REFERENCES `Location` ( `mRID` );
-- association constraint
ALTER TABLE `EnergyConsumer` ADD FOREIGN KEY ( `phaseConnection` ) REFERENCES `PhaseShuntConnectionKind` ( `name` );
-- association constraint
ALTER TABLE `EnergyConsumer` ADD FOREIGN KEY ( `BaseVoltage` ) REFERENCES `BaseVoltage` ( `mRID` );
-- association constraint
ALTER TABLE `EnergyConsumer` ADD FOREIGN KEY ( `EquipmentContainer` ) REFERENCES `Line` ( `mRID` );
-- association constraint
ALTER TABLE `EnergyConsumer` ADD FOREIGN KEY ( `LoadResponse` ) REFERENCES `LoadResponseCharacteristic` ( `mRID` );
-- association constraint
ALTER TABLE `EnergyConsumer` ADD FOREIGN KEY ( `Location` ) REFERENCES `Location` ( `mRID` );
-- association constraint
ALTER TABLE `EnergyConsumerPhase` ADD FOREIGN KEY ( `phase` ) REFERENCES `SinglePhaseKind` ( `name` );
-- association constraint
ALTER TABLE `EnergyConsumerPhase` ADD FOREIGN KEY ( `EnergyConsumer` ) REFERENCES `EnergyConsumer` ( `mRID` );
-- association constraint
ALTER TABLE `EnergyConsumerPhase` ADD FOREIGN KEY ( `Location` ) REFERENCES `Location` ( `mRID` );
-- association constraint
ALTER TABLE `EnergySource` ADD FOREIGN KEY ( `BaseVoltage` ) REFERENCES `BaseVoltage` ( `mRID` );
-- association constraint
ALTER TABLE `EnergySource` ADD FOREIGN KEY ( `EquipmentContainer` ) REFERENCES `Line` ( `mRID` );
-- association constraint
ALTER TABLE `EnergySource` ADD FOREIGN KEY ( `Location` ) REFERENCES `Location` ( `mRID` );
-- association constraint
ALTER TABLE `Fuse` ADD FOREIGN KEY ( `BaseVoltage` ) REFERENCES `BaseVoltage` ( `mRID` );
-- association constraint
ALTER TABLE `Fuse` ADD FOREIGN KEY ( `EquipmentContainer` ) REFERENCES `Line` ( `mRID` );
-- association constraint
ALTER TABLE `Fuse` ADD FOREIGN KEY ( `Location` ) REFERENCES `Location` ( `mRID` );
-- association constraint
ALTER TABLE `Jumper` ADD FOREIGN KEY ( `BaseVoltage` ) REFERENCES `BaseVoltage` ( `mRID` );
-- association constraint
ALTER TABLE `Jumper` ADD FOREIGN KEY ( `EquipmentContainer` ) REFERENCES `Line` ( `mRID` );
-- association constraint
ALTER TABLE `Jumper` ADD FOREIGN KEY ( `Location` ) REFERENCES `Location` ( `mRID` );
-- association constraint
ALTER TABLE `Line` ADD FOREIGN KEY ( `Location` ) REFERENCES `Location` ( `mRID` );
-- association constraint
ALTER TABLE `Line` ADD FOREIGN KEY ( `Region` ) REFERENCES `SubGeographicalRegion` ( `mRID` );
-- association constraint
ALTER TABLE `LinearShuntCompensator` ADD FOREIGN KEY ( `phaseConnection` ) REFERENCES `PhaseShuntConnectionKind` ( `name` );
-- association constraint
ALTER TABLE `LinearShuntCompensator` ADD FOREIGN KEY ( `BaseVoltage` ) REFERENCES `BaseVoltage` ( `mRID` );
-- association constraint
ALTER TABLE `LinearShuntCompensator` ADD FOREIGN KEY ( `EquipmentContainer` ) REFERENCES `Line` ( `mRID` );
-- association constraint
ALTER TABLE `LinearShuntCompensator` ADD FOREIGN KEY ( `Location` ) REFERENCES `Location` ( `mRID` );
-- association constraint
ALTER TABLE `LinearShuntCompensatorPhase` ADD FOREIGN KEY ( `phase` ) REFERENCES `SinglePhaseKind` ( `name` );
-- association constraint
ALTER TABLE `LinearShuntCompensatorPhase` ADD FOREIGN KEY ( `Location` ) REFERENCES `Location` ( `mRID` );
-- association constraint
ALTER TABLE `LinearShuntCompensatorPhase` ADD FOREIGN KEY ( `ShuntCompensator` ) REFERENCES `LinearShuntCompensator` ( `mRID` );
-- association constraint
ALTER TABLE `LoadBreakSwitch` ADD FOREIGN KEY ( `BaseVoltage` ) REFERENCES `BaseVoltage` ( `mRID` );
-- association constraint
ALTER TABLE `LoadBreakSwitch` ADD FOREIGN KEY ( `EquipmentContainer` ) REFERENCES `Line` ( `mRID` );
-- association constraint
ALTER TABLE `LoadBreakSwitch` ADD FOREIGN KEY ( `Location` ) REFERENCES `Location` ( `mRID` );
-- association constraint
ALTER TABLE `Location` ADD FOREIGN KEY ( `CoordinateSystem` ) REFERENCES `CoordinateSystem` ( `mRID` );
-- association constraint
ALTER TABLE `NoLoadTest` ADD FOREIGN KEY ( `EnergisedEnd` ) REFERENCES `TransformerEndInfo` ( `mRID` );
-- association constraint
ALTER TABLE `OverheadWireInfo` ADD FOREIGN KEY ( `insulationMaterial` ) REFERENCES `WireInsulationKind` ( `name` );
-- association constraint
ALTER TABLE `PhaseImpedanceData` ADD FOREIGN KEY ( `PhaseImpedance` ) REFERENCES `PerLengthPhaseImpedance` ( `mRID` );
-- association constraint
ALTER TABLE `PositionPoint` ADD FOREIGN KEY ( `Location` ) REFERENCES `Location` ( `mRID` );
-- association constraint
ALTER TABLE `PowerTransformer` ADD FOREIGN KEY ( `EquipmentContainer` ) REFERENCES `Line` ( `mRID` );
-- association constraint
ALTER TABLE `PowerTransformer` ADD FOREIGN KEY ( `Location` ) REFERENCES `Location` ( `mRID` );
-- association constraint
ALTER TABLE `PowerTransformerEnd` ADD FOREIGN KEY ( `connectionKind` ) REFERENCES `WindingConnection` ( `name` );
-- association constraint
ALTER TABLE `PowerTransformerEnd` ADD FOREIGN KEY ( `BaseVoltage` ) REFERENCES `BaseVoltage` ( `mRID` );
-- association constraint
ALTER TABLE `PowerTransformerEnd` ADD FOREIGN KEY ( `PowerTransformer` ) REFERENCES `PowerTransformer` ( `mRID` );
-- association constraint
ALTER TABLE `PowerTransformerEnd` ADD FOREIGN KEY ( `Terminal` ) REFERENCES `Terminal` ( `mRID` );
-- association constraint
ALTER TABLE `RatioTapChanger` ADD FOREIGN KEY ( `tculControlMode` ) REFERENCES `TransformerControlMode` ( `name` );
-- association constraint
ALTER TABLE `RatioTapChanger` ADD FOREIGN KEY ( `Location` ) REFERENCES `Location` ( `mRID` );
-- association constraint
ALTER TABLE `RatioTapChanger` ADD FOREIGN KEY ( `TapChangerControl` ) REFERENCES `TapChangerControl` ( `mRID` );
-- association constraint
ALTER TABLE `RatioTapChanger` ADD FOREIGN KEY ( `TransformerEnd` ) REFERENCES `TransformerEnd` ( `mRID` );
-- association constraint
ALTER TABLE `Recloser` ADD FOREIGN KEY ( `BaseVoltage` ) REFERENCES `BaseVoltage` ( `mRID` );
-- association constraint
ALTER TABLE `Recloser` ADD FOREIGN KEY ( `EquipmentContainer` ) REFERENCES `Line` ( `mRID` );
-- association constraint
ALTER TABLE `Recloser` ADD FOREIGN KEY ( `Location` ) REFERENCES `Location` ( `mRID` );
-- association constraint
ALTER TABLE `RegulatingControl` ADD FOREIGN KEY ( `mode` ) REFERENCES `RegulatingControlModeKind` ( `name` );
-- association constraint
ALTER TABLE `RegulatingControl` ADD FOREIGN KEY ( `monitoredPhase` ) REFERENCES `PhaseCode` ( `name` );
-- association constraint
ALTER TABLE `RegulatingControl` ADD FOREIGN KEY ( `Location` ) REFERENCES `Location` ( `mRID` );
-- association constraint
ALTER TABLE `RegulatingControl` ADD FOREIGN KEY ( `Terminal` ) REFERENCES `Terminal` ( `mRID` );
-- association constraint
ALTER TABLE `Sectionaliser` ADD FOREIGN KEY ( `BaseVoltage` ) REFERENCES `BaseVoltage` ( `mRID` );
-- association constraint
ALTER TABLE `Sectionaliser` ADD FOREIGN KEY ( `EquipmentContainer` ) REFERENCES `Line` ( `mRID` );
-- association constraint
ALTER TABLE `Sectionaliser` ADD FOREIGN KEY ( `Location` ) REFERENCES `Location` ( `mRID` );
-- association constraint
ALTER TABLE `ShortCircuitTest` ADD FOREIGN KEY ( `EnergisedEnd` ) REFERENCES `TransformerEndInfo` ( `mRID` );
-- association constraint
ALTER TABLE `SubGeographicalRegion` ADD FOREIGN KEY ( `Region` ) REFERENCES `GeographicalRegion` ( `mRID` );
-- association constraint
ALTER TABLE `SvInjection` ADD FOREIGN KEY ( `TopologicalNode` ) REFERENCES `TopologicalNode` ( `mRID` );
-- association constraint
ALTER TABLE `SvPowerFlow` ADD FOREIGN KEY ( `Terminal` ) REFERENCES `Terminal` ( `mRID` );
-- association constraint
ALTER TABLE `SvShuntCompensatorSections` ADD FOREIGN KEY ( `ShuntCompensator` ) REFERENCES `LinearShuntCompensator` ( `mRID` );
-- association constraint
ALTER TABLE `SvStatus` ADD FOREIGN KEY ( `ConductingEquipment` ) REFERENCES `ConductingEquipment` ( `mRID` );
-- association constraint
ALTER TABLE `SvTapStep` ADD FOREIGN KEY ( `TapChanger` ) REFERENCES `RatioTapChanger` ( `mRID` );
-- association constraint
ALTER TABLE `SvVoltage` ADD FOREIGN KEY ( `TopologicalNode` ) REFERENCES `TopologicalNode` ( `mRID` );
-- association constraint
ALTER TABLE `SwitchPhase` ADD FOREIGN KEY ( `phaseSide1` ) REFERENCES `SinglePhaseKind` ( `name` );
-- association constraint
ALTER TABLE `SwitchPhase` ADD FOREIGN KEY ( `phaseSide2` ) REFERENCES `SinglePhaseKind` ( `name` );
-- association constraint
ALTER TABLE `SwitchPhase` ADD FOREIGN KEY ( `Location` ) REFERENCES `Location` ( `mRID` );
-- association constraint
ALTER TABLE `SwitchPhase` ADD FOREIGN KEY ( `Switch` ) REFERENCES `Switch` ( `mRID` );
-- association constraint
ALTER TABLE `TapChangerControl` ADD FOREIGN KEY ( `mode` ) REFERENCES `RegulatingControlModeKind` ( `name` );
-- association constraint
ALTER TABLE `TapChangerControl` ADD FOREIGN KEY ( `monitoredPhase` ) REFERENCES `PhaseCode` ( `name` );
-- association constraint
ALTER TABLE `TapChangerControl` ADD FOREIGN KEY ( `Location` ) REFERENCES `Location` ( `mRID` );
-- association constraint
ALTER TABLE `TapChangerControl` ADD FOREIGN KEY ( `Terminal` ) REFERENCES `Terminal` ( `mRID` );
-- association constraint
ALTER TABLE `TapeShieldCableInfo` ADD FOREIGN KEY ( `insulationMaterial` ) REFERENCES `WireInsulationKind` ( `name` );
-- association constraint
ALTER TABLE `Terminal` ADD FOREIGN KEY ( `ConductingEquipment` ) REFERENCES `ConductingEquipment` ( `mRID` );
-- association constraint
ALTER TABLE `Terminal` ADD FOREIGN KEY ( `ConnectivityNode` ) REFERENCES `ConnectivityNode` ( `mRID` );
-- association constraint
ALTER TABLE `TopologicalIsland` ADD FOREIGN KEY ( `AngleRefTopologicalNode` ) REFERENCES `TopologicalNode` ( `mRID` );
-- association constraint
ALTER TABLE `TopologicalNode` ADD FOREIGN KEY ( `TopologicalIsland` ) REFERENCES `TopologicalIsland` ( `mRID` );
-- association constraint
ALTER TABLE `TransformerCoreAdmittance` ADD FOREIGN KEY ( `TransformerEnd` ) REFERENCES `TransformerEnd` ( `mRID` );
-- association constraint
ALTER TABLE `TransformerEndInfo` ADD FOREIGN KEY ( `connectionKind` ) REFERENCES `WindingConnection` ( `name` );
-- association constraint
ALTER TABLE `TransformerEndInfo` ADD FOREIGN KEY ( `TransformerTankInfo` ) REFERENCES `TransformerTankInfo` ( `mRID` );
-- association constraint
ALTER TABLE `TransformerMeshImpedance` ADD FOREIGN KEY ( `FromTransformerEnd` ) REFERENCES `TransformerEnd` ( `mRID` );
-- association constraint
ALTER TABLE `TransformerTank` ADD FOREIGN KEY ( `EquipmentContainer` ) REFERENCES `Line` ( `mRID` );
-- association constraint
ALTER TABLE `TransformerTank` ADD FOREIGN KEY ( `Location` ) REFERENCES `Location` ( `mRID` );
-- association constraint
ALTER TABLE `TransformerTank` ADD FOREIGN KEY ( `PowerTransformer` ) REFERENCES `PowerTransformer` ( `mRID` );
-- association constraint
ALTER TABLE `TransformerTankEnd` ADD FOREIGN KEY ( `phases` ) REFERENCES `PhaseCode` ( `name` );
-- association constraint
ALTER TABLE `TransformerTankEnd` ADD FOREIGN KEY ( `BaseVoltage` ) REFERENCES `BaseVoltage` ( `mRID` );
-- association constraint
ALTER TABLE `TransformerTankEnd` ADD FOREIGN KEY ( `Terminal` ) REFERENCES `Terminal` ( `mRID` );
-- association constraint
ALTER TABLE `TransformerTankEnd` ADD FOREIGN KEY ( `TransformerTank` ) REFERENCES `TransformerTank` ( `mRID` );
-- association constraint
ALTER TABLE `TransformerTankInfo` ADD FOREIGN KEY ( `PowerTransformerInfo` ) REFERENCES `PowerTransformerInfo` ( `mRID` );
-- association constraint
ALTER TABLE `WirePosition` ADD FOREIGN KEY ( `phase` ) REFERENCES `SinglePhaseKind` ( `name` );
-- association constraint
ALTER TABLE `WirePosition` ADD FOREIGN KEY ( `WireSpacingInfo` ) REFERENCES `WireSpacingInfo` ( `mRID` );
-- association constraint
ALTER TABLE `WireSpacingInfo` ADD FOREIGN KEY ( `usage` ) REFERENCES `WireUsageKind` ( `name` );
